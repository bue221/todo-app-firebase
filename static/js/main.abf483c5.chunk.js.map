{"version":3,"sources":["firebase.js","Todo.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","Todo","props","useState","open","setOpen","text","tarea","editado","setEditado","List","className","Dialog","onClose","noValidate","autoComplete","TextField","value","onChange","e","target","id","label","Button","variant","color","onClick","collection","doc","set","merge","ListItem","ListItemText","primary","secondary","IconButton","edge","aria-label","delete","App","tareas","setTareas","setTarea","useEffect","orderBy","onSnapshot","snapshot","docs","map","data","type","disabled","href","event","preventDefault","add","timestamp","FieldValue","serverTimestamp","i","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"2RA2BeA,EAbKC,IAASC,cAAc,CACzCC,OAAQ,0CACRC,WAAY,mCACZC,YAAa,0CACbC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAGMC,Y,yGC6BRC,EA3CF,SAAAC,GAAQ,MAGIC,oBAAS,GAHb,mBAGbC,EAHa,KAGPC,EAHO,OAIUF,mBAASD,EAAMI,KAAKC,OAJ9B,mBAIbC,EAJa,KAIJC,EAJI,KAcpB,OACC,kBAACC,EAAA,EAAD,CAAMC,UAAU,IACf,kBAACC,EAAA,EAAD,CAAQR,KAAMA,EAAMS,QAAS,kBAAIR,GAAQ,KACxC,0BAAMM,UAAU,OAAOG,YAAU,EAACC,aAAa,OAC9C,+CACA,kBAACC,EAAA,EAAD,CACAC,MAAOT,EACPU,SAAU,SAACC,GAAD,OAAKV,EAAWU,EAAEC,OAAOH,QACnCI,GAAG,iBACHC,MAAOd,IACP,kBAACe,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,YAAYC,QAlB9B,WACnBrC,EAAGsC,WAAW,UAAUC,IAAI1B,EAAMI,KAAKe,IAAIQ,IAAI,CAC9CtB,MAAOC,GACN,CAAEsB,OAAO,IAEXzB,GAAQ,KAaL,YAMF,kBAAC0B,EAAA,EAAD,KACC,kBAACC,EAAA,EAAD,CAAeC,QAAS/B,EAAMI,KAAKC,MAAQ2B,UAAU,WACpD,kBAACC,EAAA,EAAD,CAAYC,KAAK,MAAMC,aAAW,SAASX,QAAS,SAACP,GAAD,OAAM9B,EAAGsC,WAAW,UAAUC,IAAI1B,EAAMI,KAAKe,IAAIiB,WACpG,kBAAC,IAAD,OAED,kBAACH,EAAA,EAAD,CAAYC,KAAK,MAAMC,aAAW,SAASX,QAAS,kBAAIrB,GAAQ,KAC/D,kBAAC,IAAD,U,MC+BSkC,MAnEf,WAAgB,IAAD,EAEcpC,mBAAS,SAFvB,gCAGcA,mBAAS,KAHvB,mBAGPqC,EAHO,KAGCC,EAHD,OAIYtC,mBAAS,IAJrB,mBAIPI,EAJO,KAIAmC,EAJA,KA+Bd,OAvBAC,qBAAU,WACTtD,EAAGsC,WAAW,UAAUiB,QAAQ,YAAY,QAAQC,YAAW,SAAAC,GAE9DL,EAAUK,EAASC,KAAKC,KAAI,SAAApB,GAAG,MAAI,CAACP,GAAIO,EAAIP,GAAId,MAAOqB,EAAIqB,OAAO1C,gBAElE,IAmBD,yBAAKI,UAAU,OACd,wCACA,8BASC,kBAACK,EAAA,EAAD,CACAK,GAAG,iBACHC,MAAM,mBACN4B,KAAK,OACLhC,SAhCgB,SAACC,GACnBuB,EAASvB,EAAEC,OAAOH,QA+BMA,MAAOV,IAE7B,kBAACgB,EAAA,EAAD,CACA4B,UAAW5C,EACX2C,KAAM,SACN1B,QAAQ,YACRC,MAAM,UACN2B,KAAK,qBACL1B,QAnCY,SAAC2B,GACfA,EAAMC,iBACNjE,EAAGsC,WAAW,UAAU4B,IAAI,CAC3BhD,MAAOA,EACPiD,UAAWlE,IAASU,UAAUyD,WAAWC,oBAE1ChB,EAAS,MAuBP,cAQD,6BACCF,EAAOQ,KAAI,SAAAW,GAAC,OACb,kBAAC,EAAD,CACAC,IAAKD,EAAEtC,GACPf,KAAMqD,SC5DWE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,EAAD,MACFC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.abf483c5.chunk.js","sourcesContent":["/*\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBqJ8AEgS4B0niLrq7BMxI5jL2VbP-SzX4\",\n  authDomain: \"todo-app-28b65.firebaseapp.com\",\n  databaseURL: \"https://todo-app-28b65.firebaseio.com\",\n  projectId: \"todo-app-28b65\",\n  storageBucket: \"todo-app-28b65.appspot.com\",\n  messagingSenderId: \"904925951115\",\n  appId: \"1:904925951115:web:cb125fca05d2ddd3b1908e\",\n  measurementId: \"G-L9GT1NECWK\"\n};*/\n\nimport firebase from 'firebase';\n\nconst firebaseApp = firebase.initializeApp({\n  apiKey: \"AIzaSyDe1ETYnTcys2oAD7GOpmSGfZubHOwRbMA\",\n  authDomain: \"app-tareas-164bb.firebaseapp.com\",\n  databaseURL: \"https://app-tareas-164bb.firebaseio.com\",\n  projectId: \"app-tareas-164bb\",\n  storageBucket: \"app-tareas-164bb.appspot.com\",\n  messagingSenderId: \"144946196895\",\n  appId: \"1:144946196895:web:79ce3cabf4e3bbd97f0daa\",\n  measurementId: \"G-6G3L9R7ERL\"\n  });\n\nconst db = firebaseApp.firestore();\n\nexport default db;\n","import React,{ useState } from 'react';\nimport db from './firebase';\n\nimport './Todo.css'\n\nimport { List,ListItem, ListItemText,TextField ,Button} from '@material-ui/core'\nimport IconButton from '@material-ui/core/IconButton';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport EditIcon from '@material-ui/icons/Edit';\nimport Dialog from '@material-ui/core/Dialog';\n\nconst Todo = props =>{\n\t//console.log(props.text.id)\n\n\tconst [open, setOpen] = useState(false)\n\tconst [editado, setEditado] = useState(props.text.tarea)\n\n\tconst updateTarea = ()=>{\n\t\tdb.collection('tareas').doc(props.text.id).set({\n\t\t\ttarea: editado\n\t\t},{ merge: true })\n\t\t//console.log(editado)\n\t\tsetOpen(false)\n\t}\n\n\treturn(\n\t\t<List className=\"\" >\n\t\t\t<Dialog open={open} onClose={()=>setOpen(false)} >\n\t\t\t\t<form className=\"list\" noValidate autoComplete=\"off\">\n\t\t\t\t\t<h1>Editar la tarea</h1>\n\t\t\t\t\t<TextField \n\t\t\t\t\tvalue={editado}\n\t\t\t\t\tonChange={(e)=>setEditado(e.target.value)}\n\t\t\t\t\tid=\"standard-basic\" \n\t\t\t\t\tlabel={editado} />\n\t\t\t\t\t<Button variant=\"contained\" color=\"secondary\" onClick={updateTarea}>\n\t\t\t\t\t\tEditar\n\t\t\t\t\t</Button>\n\t\t\t\t</form>\n\t\t\t</Dialog>\n\n\t\t\t<ListItem>\n\t\t\t\t<ListItemText  primary={props.text.tarea}  secondary=\"Tareas\"/>\n\t\t\t\t\t<IconButton edge=\"end\" aria-label=\"delete\" onClick={(e)=> db.collection('tareas').doc(props.text.id).delete()}>\n\t\t\t\t\t\t<DeleteIcon />\n\t\t\t\t\t</IconButton>\n\t\t\t\t\t<IconButton edge=\"end\" aria-label=\"delete\" onClick={()=>setOpen(true)}>\n\t\t\t\t\t\t<EditIcon />\n\t\t\t\t\t</IconButton>\n\t\t\t\t</ListItem>\n\t         </List>\n\t\t);\n}\n\nexport default Todo;\n","import React,{ useState, useEffect} from 'react';\n\nimport Tarea from './Todo'\n\nimport './App.css';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nimport db from './firebase'\nimport firebase from 'firebase'\n\nfunction App() {\n\n\tconst [campos, setCampos] = useState('tarea')\n\tconst [tareas, setTareas] = useState([])\n\tconst [tarea, setTarea] = useState('')\n\n\t//console.log(campos)\n\n\tuseEffect(()=>{\n\t\tdb.collection('tareas').orderBy('timestamp','desc').onSnapshot(snapshot => {\n\t\t\t//console.log(snapshot.docs.map(doc=> doc.data()));\n\t\t\tsetTareas(snapshot.docs.map(doc=> ({id: doc.id ,tarea: doc.data().tarea})));\n\t\t})\n\t},[])\n\n\tconst inputvalue = (e)=>{\n\t\tsetTarea(e.target.value)\n\t\t//console.log(tarea);\n\t}\n\n\tconst enviar = (event)=>{\n\t\tevent.preventDefault();\n\t\tdb.collection('tareas').add({\n\t\t\ttarea: tarea,\n\t\t\ttimestamp: firebase.firestore.FieldValue.serverTimestamp()\t\n\t\t})\n\t\tsetTarea('')\n\t}\n\n\t//console.log(tareas)\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<h1>Todo App</h1>\n\t\t\t<form>\n\t\t\t\t{/*\n\t\t\t\t<TextField \n\t\t\t\tid=\"standard-basic\" \n\t\t\t\tlabel=\"Escriba a donde desea ingresar los datos\" \n\t\t\t\ttype=\"text\" \n\t\t\t\tonChange={(e)=>setCampos(e.target.value)} value={campos}/>\n\t\t\t\t*/}\n\n\t\t\t\t<TextField \n\t\t\t\tid=\"standard-basic\" \n\t\t\t\tlabel=\"Escribe tu tarea\" \n\t\t\t\ttype=\"text\" \n\t\t\t\tonChange={inputvalue} value={tarea}/>\n\n\t\t\t\t<Button\n\t\t\t\tdisabled={!tarea}\n\t\t\t\ttype= \"submit\"\n\t\t\t\tvariant=\"contained\" \n\t\t\t\tcolor=\"primary\" \n\t\t\t\thref=\"#contained-buttons\" \n\t\t\t\tonClick={enviar}>AÃ±adir</Button>\n\t\t\t</form>\n\t\t\t<br />\n\t\t\t{tareas.map(i=>(\n\t\t\t<Tarea \n\t\t\tkey={i.id}\n\t\t\ttext={i}/>\n\t\t\t))}\n\t\t</div>\n\t\t);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <App />,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}